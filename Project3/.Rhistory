require(recommenderlab)
require(ggplot2)
data("MovieLense")
class(MovieLense)
require(knitr)
require(kable)
require(kableExtra)
require(devtools)
require(tidyverse)
require(dplyr)
require(stats)
require(irlba)
require(rsvd)
library(tictoc)
dim(MovieLense)
movie_matrix_orig <- as.matrix(MovieLense@data)
length(movie_matrix_orig[movie_matrix_orig==0]) / (ncol(movie_matrix_orig)*nrow(movie_matrix_orig))
# creating movie_matrix replacing zeros with NAs
movie_matrix <- movie_matrix_orig
is.na(movie_matrix) <- movie_matrix == 0
# imputing all missing values to the row mean
k <- which(is.na(movie_matrix), arr.ind=TRUE)
movie_matrix[k] <- rowMeans(movie_matrix, na.rm=TRUE)[k[,1]]
svd_M <- svd(movie_matrix)
S <- diag(svd_M$d)
U <- svd_M$u
V <- svd_M$v
v_tran <- t(V)
# used later to find our optimal rank(k)
d <- svd_M$d
item_profile <- U %*% sqrt(S)
user_profile <- sqrt(S) %*% v_tran
item_user_profile <- item_profile %*% user_profile
rownames(item_user_profile) <- rownames(movie_matrix)
colnames(item_user_profile) <- colnames(movie_matrix)
round(max(abs(Matrix(item_user_profile) - movie_matrix)), 0)
rankMatrix(movie_matrix)[1]
hist(d, breaks = 25, xlab="singular value", ylab="frequency in d", main = "Histogram of singular values")
ss_all <- sum((d)^2)
energy <- NULL
for (i in 1:length(d)) {
energy[i] <- sum(d[1:i]^2) / ss_all
}
plot(energy, pch=20, cex = 0.5, xlab='# of singular values', ylab='Percent sum of squares of singular values', main = "Dimensionality Reduction - optimal k")
lines(x = c(0,20), y = c(.9961, .9961))
lines(x = c(20,20), y = c(0, .9961))
tic("SVD Processing")
svd_opt <- irlba(movie_matrix, nu=20, nv=20)
d_opt <- svd_opt$d
diag_view <- as.data.frame(round(diag(d_opt), 2))
diag_view %>%
mutate_all(~cell_spec(.x, color = ifelse(.x > 0, "darkred"," black"))) %>%
kable(escape = F) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), font_size = 10)
U_opt <- svd_opt$u
V_opt <- svd_opt$v
S_opt <- diag(d_opt)
Vt_opt <- t(V_opt)
paste0('The dimensions of U: ', dim(U_opt)[1], ' by ', dim(U_opt)[2])
paste0('The dimensions of S: ', dim(S_opt)[1], ' by ', dim(S_opt)[2])
paste0('The dimensions of t(V): ', dim(Vt_opt)[1], ' by ', dim(Vt_opt)[2])
Uk <- U_opt %*% sqrt(S_opt)
Vk <- sqrt(S_opt) %*% Vt_opt
item_user_profile_svd <- round((Uk %*% Vk), 2)
movie_matrix_svd <- ifelse((item_user_profile_svd) > 5, 5,
ifelse((item_user_profile_svd) < 0, 0,
(item_user_profile_svd)))
colnames(movie_matrix_svd) <- colnames(movie_matrix)
rownames(movie_matrix_svd) <- rownames(movie_matrix)
toc(log = TRUE, quiet = TRUE)
movie_matrix_NA <- movie_matrix_orig
is.na(movie_matrix_NA) <- movie_matrix_NA == 0
user_2_ratings <- movie_matrix_NA[2, ]
U_opt_user2 <- U_opt[2,]
Vt_opt_user2 <- Vt_opt[,2]
S_opt_user2 <- S_opt
user_3_ratings <- movie_matrix_NA[3, ]
U_opt_user3 <- U_opt[3,]
Vt_opt_user3 <- Vt_opt[,3]
S_opt_user3 <- S_opt
paste0('User 2 predicted rating for Goldeneye: ', round(U_opt_user2 %*% S_opt_user2 %*% Vt_opt_user2, 2))
paste0('User 3 predicted rating for Goldeneye: ', round(U_opt_user3 %*% S_opt_user3 %*% Vt_opt_user3, 2))
tic("Predicting Ratings with SVD")
svd_mat <- U_opt %>% S_opt %>% Vt_opt
tic("Predicting Ratings with SVD")
svd_mat <- U_opt %*% S_opt %*% Vt_opt
toc(log = TRUE, quiet = TRUE)
movie_matrix1 <- as(as.matrix(movie_matrix), "realRatingMatrix")
calcPredictionAccuracy(x = as(movie_matrix_svd, "realRatingMatrix"), data = movie_matrix1)
tic("UBCF Algorithm Processing")
movies_ubcf <- as(movie_matrix_orig, "realRatingMatrix")
evaluation_scheme <- evaluationScheme(data = movies_ubcf, method = "split", train = 0.8, given = 10, goodRating = 3, k = 10)
ubcf <- Recommender(getData(evaluation_scheme, "train"), method='ubcf', parameter= list(method = 'pearson', nn = 100, normalize = 'center'))
ubcf_predict <- predict(ubcf, newdata = getData(evaluation_scheme, "known"), n = 6, type = "ratings")
calcPredictionAccuracy(x = ubcf_predict, data = getData(evaluation_scheme, "unknown"), byUser = FALSE)
toc(log = TRUE, quiet = TRUE)
tic("UBCF Algorithm Processing")
movies_ubcf <- as(movie_matrix_orig, "realRatingMatrix")
evaluation_scheme <- evaluationScheme(data = movies_ubcf, method = "split", train = 0.8, given = 10, goodRating = 3, k = 10)
ubcf <- Recommender(getData(evaluation_scheme, "train"), method='ubcf', parameter= list(method = 'pearson', nn = 100, normalize = 'center'))
ubcf_predict <- predict(ubcf, newdata = getData(evaluation_scheme, "known"), n = 6, type = "ratings")
calcPredictionAccuracy(x = ubcf_predict, data = getData(evaluation_scheme, "unknown"), byUser = FALSE)
toc(log = TRUE, quiet = TRUE)
tic("IBCF Algorithm Processing")
movies_ibcf <- as(movie_matrix_orig, "realRatingMatrix")
evaluation_scheme_ibcf <- evaluationScheme(data = movies_ibcf, method = "split", train = 0.8, given = 10, goodRating = 3, k = 10)
ibcf <- Recommender(getData(evaluation_scheme_ibcf, "train"), method='ibcf', parameter= list(method = 'pearson', k = 98, normalize = 'center'))
ibcf_predict <- predict(ibcf, newdata = getData(evaluation_scheme_ibcf, "known"), n = 6, type = "ratings")
calcPredictionAccuracy(x = ibcf_predict, data = getData(evaluation_scheme_ibcf, "unknown"), byUser = FALSE)
toc(log = TRUE, quiet = TRUE)
log <- as.data.frame(unlist(tic.log(format = TRUE)))
colnames(log) <- c("Run Time")
knitr::kable(log, format = "html") %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
require(recommenderlab)
require(ggplot2)
data("MovieLense")
class(MovieLense)
require(knitr)
require(kable)
require(kableExtra)
require(devtools)
require(tidyverse)
require(dplyr)
require(stats)
require(irlba)
require(rsvd)
library(tictoc)
dim(MovieLense)
movie_matrix_orig <- as.matrix(MovieLense@data)
length(movie_matrix_orig[movie_matrix_orig==0]) / (ncol(movie_matrix_orig)*nrow(movie_matrix_orig))
# creating movie_matrix replacing zeros with NAs
movie_matrix <- movie_matrix_orig
is.na(movie_matrix) <- movie_matrix == 0
# imputing all missing values to the row mean
k <- which(is.na(movie_matrix), arr.ind=TRUE)
movie_matrix[k] <- rowMeans(movie_matrix, na.rm=TRUE)[k[,1]]
svd_M <- svd(movie_matrix)
S <- diag(svd_M$d)
U <- svd_M$u
V <- svd_M$v
v_tran <- t(V)
# used later to find our optimal rank(k)
d <- svd_M$d
item_profile <- U %*% sqrt(S)
user_profile <- sqrt(S) %*% v_tran
item_user_profile <- item_profile %*% user_profile
rownames(item_user_profile) <- rownames(movie_matrix)
colnames(item_user_profile) <- colnames(movie_matrix)
round(max(abs(Matrix(item_user_profile) - movie_matrix)), 0)
rankMatrix(movie_matrix)[1]
hist(d, breaks = 25, xlab="singular value", ylab="frequency in d", main = "Histogram of singular values")
ss_all <- sum((d)^2)
energy <- NULL
for (i in 1:length(d)) {
energy[i] <- sum(d[1:i]^2) / ss_all
}
plot(energy, pch=20, cex = 0.5, xlab='# of singular values', ylab='Percent sum of squares of singular values', main = "Dimensionality Reduction - optimal k")
lines(x = c(0,20), y = c(.9961, .9961))
lines(x = c(20,20), y = c(0, .9961))
tic("SVD Processing")
svd_opt <- irlba(movie_matrix, nu=20, nv=20)
d_opt <- svd_opt$d
diag_view <- as.data.frame(round(diag(d_opt), 2))
diag_view %>%
mutate_all(~cell_spec(.x, color = ifelse(.x > 0, "darkred"," black"))) %>%
kable(escape = F) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), font_size = 10)
U_opt <- svd_opt$u
V_opt <- svd_opt$v
S_opt <- diag(d_opt)
Vt_opt <- t(V_opt)
paste0('The dimensions of U: ', dim(U_opt)[1], ' by ', dim(U_opt)[2])
paste0('The dimensions of S: ', dim(S_opt)[1], ' by ', dim(S_opt)[2])
paste0('The dimensions of t(V): ', dim(Vt_opt)[1], ' by ', dim(Vt_opt)[2])
Uk <- U_opt %*% sqrt(S_opt)
Vk <- sqrt(S_opt) %*% Vt_opt
item_user_profile_svd <- round((Uk %*% Vk), 2)
movie_matrix_svd <- ifelse((item_user_profile_svd) > 5, 5,
ifelse((item_user_profile_svd) < 0, 0,
(item_user_profile_svd)))
colnames(movie_matrix_svd) <- colnames(movie_matrix)
rownames(movie_matrix_svd) <- rownames(movie_matrix)
toc(log = TRUE, quiet = TRUE)
movie_matrix_NA <- movie_matrix_orig
is.na(movie_matrix_NA) <- movie_matrix_NA == 0
user_2_ratings <- movie_matrix_NA[2, ]
U_opt_user2 <- U_opt[2,]
Vt_opt_user2 <- Vt_opt[,2]
S_opt_user2 <- S_opt
user_3_ratings <- movie_matrix_NA[3, ]
U_opt_user3 <- U_opt[3,]
Vt_opt_user3 <- Vt_opt[,3]
S_opt_user3 <- S_opt
paste0('User 2 predicted rating for Goldeneye: ', round(U_opt_user2 %*% S_opt_user2 %*% Vt_opt_user2, 2))
paste0('User 3 predicted rating for Goldeneye: ', round(U_opt_user3 %*% S_opt_user3 %*% Vt_opt_user3, 2))
tic("Predicting Ratings with SVD")
svd_mat <- U_opt %*% S_opt %*% Vt_opt
toc(log = TRUE, quiet = TRUE)
movie_matrix1 <- as(as.matrix(movie_matrix), "realRatingMatrix")
calcPredictionAccuracy(x = as(movie_matrix_svd, "realRatingMatrix"), data = movie_matrix1)
tic("UBCF Algorithm Processing")
movies_ubcf <- as(movie_matrix_orig, "realRatingMatrix")
evaluation_scheme <- evaluationScheme(data = movies_ubcf, method = "split", train = 0.8, given = 10, goodRating = 3, k = 10)
ubcf <- Recommender(getData(evaluation_scheme, "train"), method='ubcf', parameter= list(method = 'pearson', nn = 100, normalize = 'center'))
ubcf_predict <- predict(ubcf, newdata = getData(evaluation_scheme, "known"), n = 6, type = "ratings")
calcPredictionAccuracy(x = ubcf_predict, data = getData(evaluation_scheme, "unknown"), byUser = FALSE)
toc(log = TRUE, quiet = TRUE)
tic("IBCF Algorithm Processing")
movies_ibcf <- as(movie_matrix_orig, "realRatingMatrix")
evaluation_scheme_ibcf <- evaluationScheme(data = movies_ibcf, method = "split", train = 0.8, given = 10, goodRating = 3, k = 10)
ibcf <- Recommender(getData(evaluation_scheme_ibcf, "train"), method='ibcf', parameter= list(method = 'pearson', k = 98, normalize = 'center'))
ibcf_predict <- predict(ibcf, newdata = getData(evaluation_scheme_ibcf, "known"), n = 6, type = "ratings")
calcPredictionAccuracy(x = ibcf_predict, data = getData(evaluation_scheme_ibcf, "unknown"), byUser = FALSE)
toc(log = TRUE, quiet = TRUE)
log <- as.data.frame(unlist(tic.log(format = TRUE)))
colnames(log) <- c("Run Time")
knitr::kable(log, format = "html") %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
clear(log)
View(log)
clear(log)
log.clear()
log <- clear()
tic.clear()
tic.clearlog()
require(recommenderlab)
require(ggplot2)
data("MovieLense")
class(MovieLense)
require(knitr)
require(kable)
require(kableExtra)
require(devtools)
require(tidyverse)
require(dplyr)
require(stats)
require(irlba)
require(rsvd)
library(tictoc)
dim(MovieLense)
movie_matrix_orig <- as.matrix(MovieLense@data)
length(movie_matrix_orig[movie_matrix_orig==0]) / (ncol(movie_matrix_orig)*nrow(movie_matrix_orig))
# creating movie_matrix replacing zeros with NAs
movie_matrix <- movie_matrix_orig
is.na(movie_matrix) <- movie_matrix == 0
# imputing all missing values to the row mean
k <- which(is.na(movie_matrix), arr.ind=TRUE)
movie_matrix[k] <- rowMeans(movie_matrix, na.rm=TRUE)[k[,1]]
svd_M <- svd(movie_matrix)
S <- diag(svd_M$d)
U <- svd_M$u
V <- svd_M$v
v_tran <- t(V)
# used later to find our optimal rank(k)
d <- svd_M$d
item_profile <- U %*% sqrt(S)
user_profile <- sqrt(S) %*% v_tran
item_user_profile <- item_profile %*% user_profile
rownames(item_user_profile) <- rownames(movie_matrix)
colnames(item_user_profile) <- colnames(movie_matrix)
round(max(abs(Matrix(item_user_profile) - movie_matrix)), 0)
rankMatrix(movie_matrix)[1]
hist(d, breaks = 25, xlab="singular value", ylab="frequency in d", main = "Histogram of singular values")
ss_all <- sum((d)^2)
energy <- NULL
for (i in 1:length(d)) {
energy[i] <- sum(d[1:i]^2) / ss_all
}
plot(energy, pch=20, cex = 0.5, xlab='# of singular values', ylab='Percent sum of squares of singular values', main = "Dimensionality Reduction - optimal k")
lines(x = c(0,20), y = c(.9961, .9961))
lines(x = c(20,20), y = c(0, .9961))
tic("SVD Processing")
svd_opt <- irlba(movie_matrix, nu=20, nv=20)
d_opt <- svd_opt$d
diag_view <- as.data.frame(round(diag(d_opt), 2))
diag_view %>%
mutate_all(~cell_spec(.x, color = ifelse(.x > 0, "darkred"," black"))) %>%
kable(escape = F) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), font_size = 10)
U_opt <- svd_opt$u
V_opt <- svd_opt$v
S_opt <- diag(d_opt)
Vt_opt <- t(V_opt)
paste0('The dimensions of U: ', dim(U_opt)[1], ' by ', dim(U_opt)[2])
paste0('The dimensions of S: ', dim(S_opt)[1], ' by ', dim(S_opt)[2])
paste0('The dimensions of t(V): ', dim(Vt_opt)[1], ' by ', dim(Vt_opt)[2])
Uk <- U_opt %*% sqrt(S_opt)
Vk <- sqrt(S_opt) %*% Vt_opt
item_user_profile_svd <- round((Uk %*% Vk), 2)
movie_matrix_svd <- ifelse((item_user_profile_svd) > 5, 5,
ifelse((item_user_profile_svd) < 0, 0,
(item_user_profile_svd)))
colnames(movie_matrix_svd) <- colnames(movie_matrix)
rownames(movie_matrix_svd) <- rownames(movie_matrix)
toc(log = TRUE, quiet = TRUE)
movie_matrix_NA <- movie_matrix_orig
is.na(movie_matrix_NA) <- movie_matrix_NA == 0
user_2_ratings <- movie_matrix_NA[2, ]
U_opt_user2 <- U_opt[2,]
Vt_opt_user2 <- Vt_opt[,2]
S_opt_user2 <- S_opt
user_3_ratings <- movie_matrix_NA[3, ]
U_opt_user3 <- U_opt[3,]
Vt_opt_user3 <- Vt_opt[,3]
S_opt_user3 <- S_opt
paste0('User 2 predicted rating for Goldeneye: ', round(U_opt_user2 %*% S_opt_user2 %*% Vt_opt_user2, 2))
paste0('User 3 predicted rating for Goldeneye: ', round(U_opt_user3 %*% S_opt_user3 %*% Vt_opt_user3, 2))
tic("Predicting Ratings with SVD")
svd_mat <- U_opt %*% S_opt %*% Vt_opt
toc(log = TRUE, quiet = TRUE)
movie_matrix1 <- as(as.matrix(movie_matrix), "realRatingMatrix")
calcPredictionAccuracy(x = as(movie_matrix_svd, "realRatingMatrix"), data = movie_matrix1)
tic("UBCF Algorithm Processing")
movies_ubcf <- as(movie_matrix_orig, "realRatingMatrix")
evaluation_scheme <- evaluationScheme(data = movies_ubcf, method = "split", train = 0.8, given = 10, goodRating = 3, k = 10)
ubcf <- Recommender(getData(evaluation_scheme, "train"), method='ubcf', parameter= list(method = 'pearson', nn = 100, normalize = 'center'))
ubcf_predict <- predict(ubcf, newdata = getData(evaluation_scheme, "known"), n = 6, type = "ratings")
calcPredictionAccuracy(x = ubcf_predict, data = getData(evaluation_scheme, "unknown"), byUser = FALSE)
toc(log = TRUE, quiet = TRUE)
tic("IBCF Algorithm Processing")
movies_ibcf <- as(movie_matrix_orig, "realRatingMatrix")
evaluation_scheme_ibcf <- evaluationScheme(data = movies_ibcf, method = "split", train = 0.8, given = 10, goodRating = 3, k = 10)
ibcf <- Recommender(getData(evaluation_scheme_ibcf, "train"), method='ibcf', parameter= list(method = 'pearson', k = 98, normalize = 'center'))
ibcf_predict <- predict(ibcf, newdata = getData(evaluation_scheme_ibcf, "known"), n = 6, type = "ratings")
calcPredictionAccuracy(x = ibcf_predict, data = getData(evaluation_scheme_ibcf, "unknown"), byUser = FALSE)
toc(log = TRUE, quiet = TRUE)
log <- as.data.frame(unlist(tic.log(format = TRUE)))
colnames(log) <- c("Run Time")
knitr::kable(log, format = "html") %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
View(movie_matrix_orig)
write.csv(movie_matrix_org,"C:\Users\zalexander\Desktop\movie_matrix.csv", row.names = FALSE)
write.csv(movie_matrix_org,"C:/Users/zalexander/Desktop/movie_matrix.csv", row.names = FALSE)
write.csv(movie_matrix_orig,"C:/Users/zalexander/Desktop/movie_matrix.csv", row.names = FALSE)
sqrt(d_opt)
sqrt(sum(d_opt))
View(movie_matrix_svd)
View(movie_matrix)
write.csv(movie_matrix,"C:/Users/zalexander/Desktop/movie_matrix.csv", row.names = FALSE)
View(movie_matrix)
View(U)
View(movie_matrix_svd)
